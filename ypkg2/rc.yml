actions:
    - configure: |
        ./configure %CONFOPTS%
    - reconfigure: |
        autoreconf -vfi
        %configure
    - autogen: |
        ./autogen.sh %CONFOPTS%
        %configure
    - make: |
        make %JOBS%
    - make_install: |
        %make install DESTDIR="%installroot%"
    - cmake: |
        cmake -DCMAKE_CFLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        -DCMAKE_LD_FLAGS="${LDFLAGS}" -DCMAKE_LIB_SUFFIX="%LIBSUFFIX%" \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=%PREFIX%
    - cmake_ninja: |
        function cmake_ninja() {
            mkdir solusBuildDir && pushd solusBuildDir
            cmake -G Ninja .. \
            -DCMAKE_CFLAGS="${CFLAGS}" -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
            -DCMAKE_LD_FLAGS="${LDFLAGS}" -DCMAKE_LIB_SUFFIX="%LIBSUFFIX%" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=%PREFIX% $* || exit 1
            popd
        }
        cmake_ninja
    - ninja_qt6_install: *ninja_install |
        function ninja_qt6_install() {
            install -Ddm00755 $installdir/usr/bin
            for bin in $installdir/usr/lib64/qt6/bin/* ; do
                ln -vs $installdir/usr/lib64/qt6/bin/$(basename $bin) $installdir/usr/bin/$(basename $bin)-qt6
            done
        }
        ninja_qt6_install
    - meson_configure: |
        CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" LDFLAGS="${LDFLAGS}" meson --prefix %PREFIX% --buildtype=plain --libdir="lib%LIBSUFFIX%" --libexecdir="lib%LIBSUFFIX%/%PKGNAME%" --sysconfdir=/etc --localstatedir=/var solusBuildDir
    - ninja_build: &ninja_build |
        ninja %JOBS% -C solusBuildDir
    - ninja_install: &ninja_install |
        DESTDIR="%installroot%" ninja install %JOBS% -C solusBuildDir
    - ninja_check: &ninja_check |
        ninja test %JOBS% -C solusBuildDir
    # These macros are for backward compatibility only. Please use the ninja ones
    - meson_build: *ninja_build
    - meson_install: *ninja_install
    - meson_check: *ninja_check
    - qmake: |
        qmake QMAKE_CFLAGS_RELEASE="${CFLAGS}" QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS}" QMAKE_LFLAGS="${LDFLAGS}"
    - qmake4: |
        qmake-qt4 QMAKE_CFLAGS_RELEASE="${CFLAGS}" QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS}" QMAKE_LFLAGS="${LDFLAGS}" QMAKE_LRELEASE=/usr/bin/lrelease-qt4 QMAKE_MOC=/usr/bin/moc-qt4 QMAKE_RCC=/usr/bin/rcc-qt4 QMAKE_UIC=/usr/bin/uic-qt4
    - qml_cache: |
        function generate_cache() {
            pushd $installdir
            find . -type f -name "*.qml" -print0 | while IFS= read -r -d '' i; do
                if ! [ -a "${i}"c ]; then
                    qmlcachegen -o "${i}"c "${i}" $*
                fi
            done
            popd
        }
        generate_cache
    - qmlqt6_cache: |
        function generate_qt6_cache() {
            pushd $installdir
            find . -type f -name "*.qml" -print0 | while IFS= read -r -d '' i; do
                if ! [ -a "${i}"c ]; then
                    qmlcachegen-qt6 -o "${i}"c "${i}" $*
                fi
            done
            popd
        }
        generate_qt6_cache
    - patch: |
        patch -t -E --no-backup-if-mismatch -f
    # Only works if the user has a series file. They can provide the name to
    # override 'series' if needed
    - apply_patches: |
        function apply_patches() {
            if [[ ! -z "$1" ]]; then
                srs="$pkgfiles/$1"
            else
                srs="$pkgfiles/series"
            fi
            test -e "$srs" || exit 1
            while read -r pname ; do
                if [[ "$pname" == "" ]]; then
                    continue
                fi
                %patch -p1 -i $pkgfiles/$pname
            done < $srs
        }
        apply_patches
    # Make life easier with Haskell
    - cabal_configure: |
        export GHCV=$(ghc --numeric-version)
        mkdir -p ~/.ghc/%ARCH%-linux-$GHCV/package.conf.d
        cp /usr/lib%LIBSUFFIX%/ghc-$GHCV/package.conf.d/* ~/.ghc/%ARCH%-linux-$GHCV/package.conf.d
        ghc-pkg recache --user
        cabal configure --prefix=%PREFIX% \
                        --libdir=%libdir% \
                        --libsubdir="\$compiler/\$pkgid" \
                        --sysconfdir=/etc \
                        --enable-executable-dynamic \
                        --enable-shared \
                        --ghc-options="-O2 -fPIC"
    - cabal_build: |
        cabal build %JOBS%
    - cabal_install: |
        cabal copy --destdir=$installdir
    - cabal_register: |
        export GHCV=$(ghc --numeric-version)
        cabal register --gen-pkg-config=$package-$version.conf
        install -D -m 00644 $package-$version.conf $installdir%libdir%/ghc-$GHCV/package.conf.d/$package-$version.conf
    # Make life easier with Perl
    - perl_setup: |
        function perl_setup() {
            if [[ -e Build.PL ]]; then
                perl Build.PL installdirs=vendor create_packlist=0 $* || exit 1
            else
                perl Makefile.PL PREFIX=%PREFIX% INSTALLDIRS=vendor DESTDIR="%installroot%" $* || exit
            fi
        }
        perl_setup
    - perl_build: |
        function perl_build() {
            if [[ -e Build.PL ]]; then
                perl Build installdirs=vendor create_packlist=0 $* || exit 1
            else
                %make $* || exit 1
            fi
        }
        perl_build
    # We need to nuke use of privlib because its always a perllocal.pod situation,
    # and these macros explicitly use vendor libs
    - perl_install: |
        function perl_install() {
            if [[ -e Build.PL ]]; then
                perl Build destdir="%installroot%" install $* || exit 1
            else
                %make_install $* || exit 1
            fi
            priv_lib="%perl_privlib%"
            if [[ -e "$installdir/$priv_lib" ]]; then
                rm -rfv "$installdir/$priv_lib"
            fi
        }
        perl_install
    - python_setup: |
        function python_setup() {
            if [[ -e $PKG_BUILD_DIR/.workdir ]]; then
                cd $(cat $PKG_BUILD_DIR/.workdir)
            else
                echo $workdir > $PKG_BUILD_DIR/.workdir
            fi

            instdir=`basename $PWD`
            pushd ..
                cp -a $instdir py2build && pushd py2build
                    python2.7 setup.py build $* || exit
                popd
            popd
        }
        python_setup
    - python_install: |
        function python_install() {
            if [[ -e $PKG_BUILD_DIR/.workdir ]]; then
                cd $(cat $PKG_BUILD_DIR/.workdir)
            else
                echo $workdir > $PKG_BUILD_DIR/.workdir
            fi

            instdir=`basename $PWD`
            pushd ..
                if [[ ! -d py2build ]]; then
                    cp -a $instdir py2build
                fi
                pushd py2build
                    python2.7 setup.py install --root="%installroot%" $* || exit
                popd
            popd
        }
        python_install
    - python_test: |
        function python_test() {
            if [[ -d py2build ]]; then
                cd py2build
            fi

            if [[ -z $PYTHONPATH ]]; then
                export PYTHONPATH=%installroot%/usr/lib/python%python2_version%/site-packages:$PWD
                if [[ -d build/lib ]]; then
                    PYTHONPATH+=/build/lib
                fi
                local do_unset=true
            fi

            if [[ -z $1 ]]; then
                python2 setup.py test || exit 1
            elif [[ $1 =~ .*\.py$ ]] || [[ $1 == \-* ]]; then
                python2 "$@" || exit 1
            else
                "$@" || exit
            fi

            if [[ $do_unset ]]; then
                unset PYTHONPATH
            fi

            if [[ -d ../py2build ]]; then
                cd ..
            fi
        }
        python_test
    - python_compile: |
        function python_compile() {
            if [ -z "$1" ]; then
                python2 -m compileall -q $installdir || exit 1
            else
                python2 -m compileall -q $* || exit 1
            fi
        }
        python_compile
    - python3_setup: |
        function python3_setup() {
            if [[ -e $PKG_BUILD_DIR/.workdir ]]; then
                cd $(cat $PKG_BUILD_DIR/.workdir)
            else
                echo $workdir > $PKG_BUILD_DIR/.workdir
            fi

            instdir=`basename $PWD`
            pushd ..
                cp -a $instdir py3build && pushd py3build
                    python3 setup.py build $* || exit
                popd
            popd
        }
        python3_setup
    - python3_install: |
        function python3_install() {
            if [[ -e $PKG_BUILD_DIR/.workdir ]]; then
                cd $(cat $PKG_BUILD_DIR/.workdir)
            else
                echo $workdir > $PKG_BUILD_DIR/.workdir
            fi

            instdir=`basename $PWD`
            pushd ..
                if [[ ! -d py3build ]]; then
                    cp -a $instdir py3build
                fi
                pushd py3build
                    python3 setup.py install --root="%installroot%" $* || exit
                popd
            popd
        }
        python3_install
    - python3_test: |
        function python3_test() {
            if [[ -d py3build ]]; then
                cd py3build
            fi

            if [[ -z $PYTHONPATH ]]; then
                export PYTHONPATH=%installroot%/usr/lib/python%python3_version%/site-packages:$PWD
                if [[ -d build/lib ]]; then
                    PYTHONPATH+=/build/lib
                fi
                local do_unset=true
            fi

            if [[ -z $1 ]]; then
                python3 setup.py test || exit 1
            elif [[ $1 =~ .*\.py$ ]] || [[ $1 == \-* ]]; then
                python3 "$@" || exit 1
            else
                "$@" || exit
            fi

            if [[ $do_unset ]]; then
                unset PYTHONPATH
            fi

            if [[ -d ../py3build ]]; then
                cd ..
            fi
        }
        python3_test
    - python3_compile: |
        function python3_compile() {
            if [ -z "$1" ]; then
                python3 -m compileall -q $installdir || exit 1
            else
                python3 -m compileall -q $* || exit 1
            fi
        }
        python3_compile
    # Make life easier with Ruby gems
    - gem_build: |
        function gem_build() {
            if [ -z "$1" ]; then
                gem build *.gemspec || exit 1
            else
                gem build $* || exit 1
            fi
        }
        gem_build
    - gem_install: |
        function gem_install() {
            export geminstalldir=$(ruby -e'puts Gem.default_dir')
            export GEM_HOME=$geminstalldir
            export GEM_PATH=$geminstalldir
            if [ -a *.gem ]; then
                gem install --ignore-dependencies --no-user-install --no-document -i "$installdir/$geminstalldir" -n "$installdir/usr/bin" *.gem || exit 1
            else
                gem install --ignore-dependencies --no-user-install --no-document -i "$installdir/$geminstalldir" -n "$installdir/usr/bin" $sources/*.gem || exit 1
            fi
            if [[ -e "$installdir/$geminstalldir/cache" ]]; then
                rm -rfv $installdir/$geminstalldir/cache
            fi
        }
        gem_install
    - waf_configure: |
        ./waf configure --prefix=%PREFIX%
    - waf_build: |
        ./waf build --jobs="%YJOBS%"
    - waf_install: |
        ./waf install --jobs="%YJOBS%" --destdir="%installroot%"
    - llvm_profile_merge: |
        if [[ -d "$YPKG_PGO_DIR" ]]; then
            pushd "$YPKG_PGO_DIR"
            if [[ ! -e default.profdata ]]; then
                llvm-profdata merge -output=default.profdata default-*.profraw
            fi
            popd
        else
            echo "\n\nError: Profiling requested by ypkg but doesn't exist\n\n"
        fi
    - avx2_lib_shift: |
        install -dm00755 $PKG_BUILD_DIR/haswell
        mv %installroot%/%libdir%/* $PKG_BUILD_DIR/haswell
        mv $PKG_BUILD_DIR/haswell %installroot%/%libdir%/
defines:
    - CONFOPTS: |
        --prefix=%PREFIX% --build=%HOST% --libdir=%libdir% --mandir=/usr/share/man \
        --infodir=/usr/share/info --datadir=/usr/share --sysconfdir=/etc \
        --localstatedir=/var --libexecdir=%libdir%/%PKGNAME%
    # Inspired by the RPM guys :]
    - perl_privlib: |
        $(eval `perl -V:installprivlib`; echo $installprivlib)
    # Get LTS kernel version
    - kernel_version_lts: |
        $(echo "$(basename `readlink /usr/lib/kernel/default-lts` | cut -d '.' -f 4,5,6)".lts)
    # Get "Current" kernel version
    - kernel_version_current: |
        $(echo "$(basename `readlink /usr/lib/kernel/default-current` | cut -d '.' -f 4,5,6)".current)
    # Get python 2 & 3 version
    - python2_version: |
        $(python2 --version 2>&1 | sed -r 's|^Python (.*)\..*$|\1|')
    - python3_version: |
        $(python3 --version 2>&1 | sed -r 's|^Python (.*)\..*$|\1|')
