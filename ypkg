#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  This file is part of ypkg2
#
#  Copyright 2015-2020 Solus Project
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#

from ypkg2 import console_ui
from ypkg2.main import show_version
import subprocess
import sys
import os
import argparse


def main():
    parser = argparse.ArgumentParser(description="Ypkg")
    parser.add_argument("-n", "--no-colors", help="Disable color output",
                        action="store_true")
    parser.add_argument("-v", "--version", action="store_true",
                        help="Show version information and exit")
    parser.add_argument("-f", "--force", help="Force install dependencies, "
                        "i.e. no prompt", action="store_true")
    parser.add_argument("-D", "--output-dir", type=str,
                        help="Set the output directory for resulting files")
    parser.add_argument("-r", "--rootless", nargs='?', type=str,
                        help="Set which rootless binary to use e.g. fakeroot, rootlesskit")
    # Main file
    parser.add_argument("filename", help="Path to the ypkg YAML file",
                        nargs='?')

    args = parser.parse_args()
    # Kill colors
    if args.no_colors:
        console_ui.allow_colors = False
    # Show version
    if args.version:
        show_version()

    # Grab filename
    if not args.filename:
        console_ui.emit_error("Error", "Please provide a filename")
        print("")
        parser.print_help()
        sys.exit(1)
    elif args.filename:
        recipe = f"{args.filename}"

    if args.rootless:
        rootless_bin = f"{args.rootless} "
    else:
        rootless_bin = ""

    try:
        subprocess.check_call("ypkg-install-deps {}".format(recipe), shell=True)
        subprocess.check_call("{}ypkg-build {}".format(rootless_bin, recipe), shell=True)
    except Exception as e:
        print(e)
        sys.exit(1)


if __name__ == "__main__":
    main()
