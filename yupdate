#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
#  yupdate.py
#
#  Copyright 2015-2018 Ikey Doherty <ikey@solus-project.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#

import argparse
import sys
import ruamel.yaml
import os
import subprocess
import pisi.version

parser = argparse.ArgumentParser()
parser.add_argument("version", type=str, help="new version of package")
parser.add_argument("url", type=str, help="url to new package version")
parser.add_argument("--tag-prefix", type=str, help="git version tag prefix [default: v]", default="v")
parser.add_argument("--yml", type=str, help="path to package yml config [default: ./package.yml]", default="package.yml")

def usage(msg=None, ex=1):
    if msg:
        print(msg)
    else:
        parser.print_help()
    sys.exit(ex)

def shasum(url):
    fname = os.path.basename(url)
    try:
        r = os.system("wget \"%s\"" % url)
    except:
        print("Failed to download file")
        sys.exit(1)
    if r != 0:
        print("Failed to download file")
        sys.exit(1)

    sha256 = subprocess.check_output(["sha256sum",  fname]).split()[0].strip()
    os.unlink(fname)
    return sha256

if __name__ == "__main__":
    args = parser.parse_args()

    ymlfile = args.yml
    if not os.path.exists(ymlfile):
        usage("Specified file does not exist")
    if not ymlfile.endswith(".yml"):
        usage("%s does not look like a valid package.yml file" % ymlfile)

    newversion = args.version
    try:
        d = pisi.version.Version(newversion)
    except Exception as e:
        print("Problematic version string: %s" % e)
        sys.exit(1)

    url = args.url
    if not url.startswith("git|"):
        source = {url: shasum(url)}
    else:
        source = {url: args.tag_prefix + newversion}

    with open(ymlfile, "r") as infile:
        data = ruamel.yaml.round_trip_load(infile)
    data['source'] = sources = []
    sources.append(source)
    data['release'] += 1
    data['version'] = newversion

    try:
        with open(ymlfile, 'w') as fp:
            ruamel.yaml.round_trip_dump(
                data, fp, indent=4, block_seq_indent=4, width=200,
                top_level_colon_align=True, prefix_colon=' ')
    except Exception as e:
        print("Error writing file, may need to reset it.")
        print(e)
        sys.exit(1)
