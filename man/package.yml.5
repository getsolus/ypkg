.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "PACKAGE\.YML" "5" "September 2021" "" ""
.
.SH "NAME"
\fBpackage\.yml\fR \- Solus package build format
.
.SH "SYNOPSIS"
.
.nf

The Solus package build format, with YAML syntax\.
.
.fi
.
.SH "DESCRIPTION"
The primary format of package builds in Solus, \fBpackage\.yml(5)\fR provides a modern, declarative, and structured format in which to define metadata and steps, to convert a build operation into a package\.
.
.P
\fBypkg\-build(1)\fR will use the advanced patterns system and some very specific internal rules to automatically split the package into multiple packages, refered to here as "subpackages"\.
.
.SH "CONFIGURATION FORMAT"
\fBypkg\-build(1)\fR uses the YAML file format\. However, this is a very specialised flavour of YAML with very specific extensions and types\.
.
.P
\fBTypes\fR
.
.P
Some of the specialised types expected by \fBpackage\.yml(5)\fR are explained below\.
.
.IP "\(bu" 4
\fBdict(s)\fR
.
.IP
This is a set of one or more \fBkey\fR:\fBvalue\fR mappings\. These are always in a list format\.
.
.IP "\(bu" 4
\fBmultimap\fR
.
.IP
This is a \fBkey\fR:\fBvalue\fR mapping where the \fBkey\fR is IMPLICIT\. That is to say, it is acceptable to omit the key\. A single value passed as the \fBvalue\fR will set the implicit key\'s component\.
.
.IP
In all instances the implicit key is the \fBmain package\fR\. The \fBmultimap\fR format can accept a list instead of a string as a value, and each item in that list also follows the implicit key policy\.
.
.IP
For each item in the list, if the \fBkey\fR is EXPLICIT, by using \fBdict\fR style \fBkey\fR:\fBvalue\fR mapping, then the key specified will be used\.
.
.IP
Within \fBypkg(1)\fR, that key is always a package name\. This name should be the shortform name, not the fully qualified name, i\.e the subpackage name without the \fBname\fR prefix\.
.
.IP
As a special exception to the subpackage rule, keys beginning with \fB^\fR will result in an explicitly named package lookup, i\.e\. one that doesn\'t follow the subpackage convention\. This should be used only in rare cases where it is illogical to share a common root name, or a migration with name changes from a legacy format is too complex\.
.
.IP
This allows a general key to accept sane defaults, but also allows the key to be extended to override attributes of a subpackage\.
.
.IP "" 0
.
.P
\fBMandatory Keys\fR
.
.IP "\(bu" 4
\fBname\fR [string]
.
.IP
Set the name of the package\. In general this should try to match the upstream source name wherever possible\. All subpackages generated by \fBypkg\-build(1)\fR will have this \fBname\fR as a prefix\.
.
.IP "\(bu" 4
\fBversion\fR [string]
.
.IP
The version of the software being packaged\. This should match the upstream version, i\.e\. that of the tarball or git tag\.
.
.IP "\(bu" 4
\fBrelease\fR [integer]
.
.IP
Packages within Solus are updated by their \fBrelease number\fR\. This number must start at 1 in new packages, and be incremented for every new update or change to the package that is published\.
.
.IP
It is perfectly acceptable to push an update with a \fBlower version\fR by bumping the release number\.
.
.IP "\(bu" 4
\fBlicense\fR [string(s)]
.
.IP
One or more strings that identify the software license of this package\. This should in most cases be a recognised \fBSPDX\fR license name\.
.
.IP "" 4
.
.nf

  * https://spdx\.org/licenses/
.
.fi
.
.IP "" 0

.
.IP "\(bu" 4
\fBsource\fR [dict(s)]
.
.IP
This key expects a list of \fBkey\fR:\fBvalue\fR mappings, to declare the sources that this package will use\. A "simple source" could be a tarball, where the key is the upstream URL, and the value must be a valid \fBsha256sum(1)\fR for that tarball\.
.
.IP
You can list multiple sources and they will all be fetched for the build process, but only the first will be extracted\. You can locate these other sources during your build with the \fB$sources\fR variable\.
.
.IP
\fBgit(1)\fR sources are also supported, and can be identified by prefixing the URI with \fBgit|\fR\. The expected value should be a commit, sha reference, or a tag\.
.
.IP "\(bu" 4
\fBcomponent\fR [multimap]
.
.IP
This key sets the package component, that is to say, the logical unit of organisation that it belongs to\. Check \fBeopkg lc\fR for existing component names\.
.
.IP
\fBcomponent\fR is a multimap key, therefore if passed a single string value it will set the component for the main package\. However, you may instead pass a list of the subpackage names, and set their component individually using the map \fBvalue\fR\.
.
.IP "\(bu" 4
\fBsummary\fR [multimap]
.
.IP
Set the "short" description of a package, i\.e\. a one line explanation of what an item is\. Use the subpackage names in the explicit key for this multimap to override subpackage summaries\.
.
.IP "\(bu" 4
\fBdescription\fR [multimap]
.
.IP
Set the full description of a package, i\.e\. a more in depth explanation of the software/package\'s functionality\. This is the large description that will be displayed in \fBeopkg\fR and the \fBsolus\-sc\fR\. Use the subpackage names in the explicit key for this multimap to override subpackage descriptions\.
.
.IP "" 0
.
.P
\fBOptional Keys\fR
.
.P
These keys are not mandatory to a \fBpackage\.yml\fR file, but may be used to configure additional functionality\.
.
.IP "\(bu" 4
\fBbuilddeps\fR [list]
.
.IP
Specifies the build dependencies required to actually make this package build in an isolated environment (\fBsolbuild(1)\fR)\.
.
.IP
You may use full package names here, though it is preferable to use the \fBpkg\-config(1)\fR names\.
.
.IP
\fBypkg\-build(1)\fR understands pkgconfig dependencies denoted inside either the \fBpkgconfig($name)\fR identifier, or \fBpkgconfig32($name)\fR for emul32 build dependencies\.
.
.IP
It is not required to list any package here that exists in the \fBsystem\.base\fR or \fBsystem\.devel\fR component\.
.
.IP "\(bu" 4
\fBclang\fR [boolean]
.
.IP
Set this key to \fByes\fR to force building this package with the \fBclang\fR compiler\. The build environment will be configured to use \fBclang\fR as the \fB$CC\fR and \fBclang++\fR as the \fB$CXX\fR variables\.
.
.IP
By default this key is set to \fBno\fR\.
.
.IP "\(bu" 4
\fBccache\fR [boolean]
.
.IP
If configured correctly, \fBypkg\-build(1)\fR will automatically use \fBccache(1)\fR\. When using \fBsolbuild(1)\fR this is almost always the case\. However, there may be some cases when ccache can break the build, or is ill advised\.
.
.IP
Whilst the default value of this key is \fByes\fR, you can force disable the use of ccache by setting it to \fBno\fR\.
.
.IP "\(bu" 4
\fBdevel\fR [boolean]
.
.IP
Force all built packages to belong to the \fBsystem\.devel\fR component\. This will become deprecated in future, and currently defaults to \fBno\fR\.
.
.IP "\(bu" 4
\fBextract\fR [boolean]
.
.IP
By default, \fBypkg\-build(1)\fR will extract all sources listed in the file\. If this is undesirable, set this key to \fBno\fR to disable this automatic extraction\.
.
.IP "\(bu" 4
\fBautodep\fR [boolean]
.
.IP
After a build has finished, \fBypkg\-build(1)\fR will automatically scan the package files to determine dependencies between the package and any of it\'s subpackages, and to external packages in the build environment\.
.
.IP
This is essential in most cases, as it allows packages to benefit from automatic dependencies and ensures the user always gets all of the packages needed to run this software when installing it\.
.
.IP
If for any reason you need to disable this functionality, i\.e\. for bootstrapping or sideloading, set this key to \fBno\fR\.
.
.IP "\(bu" 4
\fBemul32\fR [boolean]
.
.IP
\fBypkg\-build(1)\fR can optionally build your package in a multilib configuration\. If this key is set to \fByes\fR, the buildset will double, and the first build configuration will be set up for a \fB32\-bit\fR ("emul32") build\. ypkg will automatically split off \fB\-32bit\fR and \fB\-32bit\-devel\fR subpackages in this instance, using the \fB/usr/lib32\fR library directory\. It will also add additional build dependencies automatically for 32\-bit builds\.
.
.IP
By default, this key is set to \fBno\fR\.
.
.IP "\(bu" 4
\fBlibsplit\fR [boolean]
.
.IP
The default patterns include logic to split subpackages according to the library files in library directory\. It is standard practice for ypkg to split \fB*\.so\fR symlinks into the automatic \fBdevel\fR subpackage, along with other development assets such as \fBpkgconfig\fR and \fB*\.h\fR files\.
.
.IP
Some software packages provide \fB*\.so\fR files in the libdir that are not symlinks, or are required for "main" operation\. In this instance you can set this key to \fBno\fR to disable this pattern\.
.
.IP
By default, this key is set to \fByes\fR, and should only be disabled if truly required\.
.
.IP "\(bu" 4
\fBrundeps\fR [multimap]
.
.IP
Provide a list of additional runtime dependencies for the main package\. These names should be fully qualified package names in the list, even for subpackages\.
.
.IP
If the EXPLICIT multimap key is set, then the runtime dependencies will be added to the subpackage instead\. Note that you can pass a list or a single string value to the EXPLICIT rundep\.
.
.IP "\(bu" 4
\fBreplaces\fR [multimap]
.
.IP
When exported in the package index, this will indicate to the package manager that THIS package now replaces the name in the value\.
.
.IP
You may also set \fBreplaces\fR on subpackages using the multimap notation\. Only one value per subpackage is allowed\.
.
.IP "\(bu" 4
\fBpatterns\fR [multimap]
.
.IP
Control package splitting and dynamically generate subpackages\. The EXPLICIT key is used to specify the new (or existing!) subpackage name\. The "pattern" is a shell compatible \fBglob(3)\fR expression\.
.
.IP
All files captured by this expression will then end up in that subpackage\. Each successive pattern takes priority over the one listed before it, so if your first pattern unavoidably captures files you need in ANOTHER subpackage, simply list that pattern later\.
.
.IP
\fBypkg\-build(1)\fR ensures that a file cannot belong to multiple packages, and that the last specified pattern, if matching, ALWAYS wins\. It is even possible to suppress generation of the main package, by pattern globbing \fB/*\fR to a subpackage\. This will not cause any breakage\.
.
.IP "\(bu" 4
\fBpermanent\fR [list]
.
.IP
A list of patterns used to mark files as permanent\. Any file within the resulting binary packages that matches the path pattern, is marked as a permanent file\.
.
.IP
These files will not be removed from the filesystem when upgrading or reinstalling the package\. They will persist during standard upgrade operations\.
.
.IP
This should only be used in critical chain packages such as the kernel or drivers, where the domain of control is outside of the package manager, and the package is simply used as an update delivery mechanism\.
.
.IP "\(bu" 4
\fBstrip\fR [boolean]
.
.IP
By default, this key is enabled, and as a result \fBypkg\-build(1)\fR will automatically strip files after the build has done, including \fBELF\fR libraries & binaries\.
.
.IP
In most cases, stripping should remain enabled\. However, there are known cases when stripping should be avoided, such as when complying with a distribution policy of binary only software, or when dealing with files that only appear to be standard ELF files\.
.
.IP
The Go programming language generates \fB*\.a\fR archive files that under no circumstance should be stripped, and there are likely other cases\. This key, when set to \fBno\fR, will disable any and all stripping\.
.
.IP "\(bu" 4
\fBlastrip\fR [boolean]
.
.IP
By default, this key is enabled, and will result in \fB*\.la\fR libtool files being stripped from the build\. However in some very rare cases these files need to be preserved because they\'re not \fBtrue\fR libtool scripts which led to the creation of successful \fB\.so\fR linkage\.
.
.IP
If in doubt, omit this option where possible\.
.
.IP "\(bu" 4
\fBdebug\fR [boolean]
.
.IP
By default, this key is enabled, and as a result \fBypkg\-build(1)\fR will automatically create resulting \fB\-dbginfo\fR packages where it can\.
.
.IP
In the majority of cases, this is the desired behaviour in full build environments, such as a build server\. However in very rare cases, this may cause problems for the package, especially if it contains binaries that have not been bootstrapped with the native toolchain\.
.
.IP "\(bu" 4
\fBavx2\fR [boolean]
.
.IP
If set, the package will be rebuilt again specifically to enable libraries to be optimised to use \fBAdvanced Vector Extensions\fR\.
.
.IP
The build will be configured with a library directory suffix of \fBhaswell\fR, i\.e\. \fB/usr/lib64/haswell\fR or \fB/usr/lib32/haswell\fR\. These libraries will be automatically loaded on the Solus installation if the hardware support is present\.
.
.IP "\(bu" 4
\fBoptimize\fR [list]
.
.IP
Valid keys are restricted to:
.
.IP "\(bu" 4
\fBspeed\fR: Optimise this package for speed performance
.
.IP "\(bu" 4
\fBsize\fR: Optimize the package build solely for size\.
.
.IP "\(bu" 4
\fBno\-bind\-now\fR: Configure the package to disable certain flags, where RELRO is unsupported\.
.
.IP "\(bu" 4
\fBno\-symbolic\fR: Disable \fB\-Wl,\-Bsymbolic\-functions\fR linker flag
.
.IP "\(bu" 4
\fBunroll\-loops\fR: Enable \fB\-funroll\-loops\fR\. Use this sparingly, only when it provides benefit\.
.
.IP "\(bu" 4
\fBrunpath\fR: Enable \fB\-Wl,\-\-enable\-new\-dtags\fR to make linker use RUNPATH\'s instead of RPATH\'s\.
.
.IP "\(bu" 4
\fBavx256\fR: Disables \fB\-mprefer\-vector\-width=128\fR in avx2 builds
.
.IP "\(bu" 4
\fBthin\-lto\fR: Enable Thin Link Time Optimization
.
.IP "\(bu" 4
\fBlto\fR: Enable Link Time Optimization
.
.IP "\(bu" 4
\fBicf\-safe\fR: Enable \fB\-Wl,\-\-icf=safe\fR to utilize the safe Identical Code Folding linker optimization\.
.
.IP "\(bu" 4
\fBicf\-all\fR: Enable \fB\-Wl,\-\-icf=all\fR to utilize the Identical Code Folding linker optimization\.
.
.IP "\(bu" 4
\fBfunction\-sections\fR: Enables \fB\-ffunction\-sections\fR to generate a seperate ELF section for each function\. Recommended for icf with gcc\.
.
.IP "" 0

.
.IP "\(bu" 4
\fBnetworking\fR [boolean]
.
.IP
When built using \fBsolbuild(1)\fR, access to the network is removed\. A new loopback device will be provided within the container\. This ensures that packages do not accidently download unverifiable content during build\.
.
.IP
If for any reason, networking is still required, you can set this key to \fByes\fR\. However, always evaluate whether it is avoidable first\.
.
.IP "\(bu" 4
\fBenvironment\fR [unicode]
.
.IP
By default, this key is empty and no additional content is exported to each build step\. The \fBenvironment\fR key provides an easy method to export content such as variables to the environment for the entirety of the build (where the environment is reset between each build step)\.
.
.IP "" 0
.
.P
\fBBuild Steps\fR
.
.P
The build steps are text\-only data values\. \fBypkg\-build(1)\fR will interpret special "macro" values in these steps, and evaluate them in a new environment via the \fBbash(1)\fR shell\.
.
.IP "\(bu" 4
\fBsetup\fR
.
.IP
Performed immediately after source preparation and extraction\. This is where you should look to patch your package if necessary, and perform any configuration routines (i\.e\. \fB%configure\fR)
.
.IP "\(bu" 4
\fBbuild\fR
.
.IP
The main build step\. This is where you compile code and do long running code\. An example would be running \fB%make\fR
.
.IP "\(bu" 4
\fBinstall\fR
.
.IP
The install step will install of the built files into the final installation directory, to be converted into a native \fB\.eopkg\fR file\. This is where your \fB%make_install\fR would happen, for example\.
.
.IP
Remember, this is to install inside the \fBpackage\fR\. This doesn\'t impact the package installation on another users computer\. There is no "postinstall" concept currently supported by ypkg\.
.
.IP "\(bu" 4
\fBcheck\fR
.
.IP
Run any test suites in this step\. This is the final step in the chain, and allows you to verify what you just built\. This is a good place to run \fB%make check\fR
.
.IP "\(bu" 4
\fBprofile\fR
.
.IP
If this step is present, then each build set that is enabled (native, \fBemul32\fR), will gain a series of new steps\. The build will be configured for profile guided optimisation, and this step will be used to execute the PGO workload\.
.
.IP
In essence the workflow looks like this:
.
.IP "" 4
.
.nf

  \- `setup` as PGO
  \- `build` as PGO
  \- `profile` as PGO
  \- Clean happens here\.
  \- `setup` to use PGO data
  \- `build` to use PGO data
  \- `install`
  \- `check`
.
.fi
.
.IP "" 0
.
.IP
The compiler flags will be modifed automatically during each step to make PGO integration seamless\. For an real world case on how this helps, check out:
.
.IP "\(bu" 4
https://clearlinux\.org/blogs/profile\-guided\-optimization\-mariadb\-benchmarks
.
.IP "" 0

.
.IP "" 0
.
.P
\fBMacros\fR
.
.P
ypkg supports a wide range of macros for easier package building\. They evolve often and quickly, so you should always refer to the main \fBpackage\.yml\fR documentation:
.
.IP "\(bu" 4
https://getsol\.us/articles/packaging/package\.yml/en/#actionable\-macros
.
.IP "\(bu" 4
https://getsol\.us/articles/packaging/package\.yml/en/#variable\-macros
.
.IP "" 0
.
.P
It may also be beneficial to study the \fBrc\.yml\fR file defining the build macros:
.
.IP "\(bu" 4
https://github\.com/getsolus/ypkg/blob/master/ypkg2/rc\.yml
.
.IP "" 0
.
.SH "EXAMPLES"
\fBA Complete package\fR
.
.IP "" 4
.
.nf

name       : nano
version    : 2\.7\.1
release    : 63
source     :
    \- https://www\.nano\-editor\.org/dist/v2\.7/nano\-2\.7\.1\.tar\.xz : df5cbe69831d7394c0a32fb27373ab313335ea4dc586d6f4be4081eb1de857cd
license    :
    \- GPL\-3\.0
summary    : Small, friendly text editor inspired by Pico
component  : editor
description: |
    GNU nano is an easy\-to\-use text editor originally designed as a
    replacement for Pico, the ncurses\-based editor from the non\-free
    mailer package Pine (itself now available under the Apache License
    as Alpine)\.
setup      : |
    %configure \-\-enable\-utf8 \-\-docdir=/usr/share/doc/nano
build      : |
    %make
install    : |
    %make_install
.
.fi
.
.IP "" 0
.
.P
\fBGit sources\fR
.
.IP "" 4
.
.nf

source     :
    \- git|https://github\.com/getsolus/ypkg\.git : v17\.0
.
.fi
.
.IP "" 0
.
.P
\fBMultimap examples\fR
.
.IP "" 4
.
.nf

# Set the component for the main package to `system\.base`
component: system\.base

# Also setting the main component to `system\.base`
component:
    \- system\.base

# Set the component of the main package to system\.base, but set the
# component for subpackage `devel` to `programming\.devel`
component:
    \- system\.base
    \- devel: programming\.devel

# Rundeps multimap
rundeps:
    \- somepkg
    \- devel: somepkg2

# Rundeps, list as explicit key\'s value
rundeps:
    \- somepkg
    \- devel:
        \- somepkg
        \- somepkg2
.
.fi
.
.IP "" 0
.
.P
\fBBuild dependencies examples\fR
.
.IP "" 4
.
.nf

# Build dependencies, in various flavours:
builddeps:
    \- glibc\-32bit\-devel
    \- pkgconfig(gtk+\-3\.0)
    \- pkgconfig32(zlib)
.
.fi
.
.IP "" 0
.
.SH "COPYRIGHT"
.
.IP "\(bu" 4
Copyright © 2016\-2020 Solus Project
.
.IP "" 0
.
.P
Released under the terms of the CC\-BY\-SA\-3\.0 license
.
.SH "SEE ALSO"
\fBsolbuild(1)\fR, \fBypkg(1)\fR \fBypkg\-build(1)\fR, \fBypkg\-install\-deps(1)\fR
.
.IP "\(bu" 4
https://getsol\.us/articles/packaging/package\.yml/en/
.
.IP "\(bu" 4
https://github\.com/getsolus/ypkg
.
.IP "\(bu" 4
https://getsol\.us/articles/packaging
.
.IP "\(bu" 4
https://spdx\.org/licenses/
.
.IP "\(bu" 4
https://en\.wikipedia\.org/wiki/Advanced_Vector_Extensions
.
.IP "\(bu" 4
https://en\.wikipedia\.org/wiki/Profile\-guided_optimization
.
.IP "" 0
.
.SH "NOTES"
Creative Commons Attribution\-ShareAlike 3\.0 Unported
.
.IP "\(bu" 4
http://creativecommons\.org/licenses/by\-sa/3\.0/
.
.IP "" 0

